name: ci-cd

on:
  push:            # гоним CI на любых ветках
  pull_request:    # и на PR
  workflow_dispatch:

env:
  IMAGE: ghcr.io/sakatass/sklearn-cicd-demo:${{ github.sha }}

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        shell: bash   # по умолчанию bash на всех шагах этого job (fix pwsh) 
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Train & write model
        run: python train.py

      - name: Unit tests (only fast tests/)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: python -m pytest -q tests

      - name: Upload model & metrics (artifacts v4)
        uses: actions/upload-artifact@v4
        with:
          name: model-${{ github.sha }}
          path: |
            models/model.pkl
            metrics.json

  train-build:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: Install deps (DVC optional)
        run: |
          pip install -r requirements.txt || true
          pip install dvc || true

      - name: Try DVC pull (best-effort)
        run: |
          if command -v dvc >/dev/null 2>&1; then
            dvc pull || echo "DVC remote not configured – will use artifact"
          else
            echo "DVC not installed – will use artifact"
          fi

      - name: Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: model-${{ github.sha }}
          path: .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        run: |
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

  deploy-stage:
    if: github.ref == 'refs/heads/main'
    needs: train-build
    runs-on: [self-hosted, local, stage]   # твой Windows-раннер
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: Pull & up stage
        shell: pwsh
        run: |
          $env:GIT_SHA="${{ github.sha }}"
          docker login ghcr.io -u $env:GITHUB_ACTOR -p $env:GITHUB_TOKEN
          docker compose -f docker-compose.stage.yml pull
          docker compose -f docker-compose.stage.yml up -d --remove-orphans
      - name: Smoke on stage
        shell: pwsh
        run: |
          pip install -r requirements.txt
          python tests/smoke.py

  e2e-stage:
    if: github.ref == 'refs/heads/main'
    needs: deploy-stage
    runs-on: [self-hosted, local, stage]
    steps:
      - uses: actions/checkout@v4
      - name: Install test deps
        shell: pwsh
        run: pip install -r requirements.txt
      - name: E2E tests against stage
        shell: pwsh
        env:
          STAGE_URL: http://localhost:8080
        run: pytest -q tests_stage

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: e2e-stage
    runs-on: [self-hosted, local, prod]
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: Pull & up prod
        shell: pwsh
        run: |
          $env:GIT_SHA="${{ github.sha }}"
          docker login ghcr.io -u $env:GITHUB_ACTOR -p $env:GITHUB_TOKEN
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d --remove-orphans
      - name: Smoke on prod
        shell: pwsh
        env:
          URL: http://localhost:9090
        run: python tests/smoke.py
