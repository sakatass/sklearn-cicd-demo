name: ci-cd
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE: ghcr.io/sakatass/sklearn-cicd-demo:${{ github.sha }}

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # пушим образ в GHCR
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - name: Install deps
        run: pip install -r requirements.txt
      - name: Train & write model
        run: python train.py
      - name: Unit tests (only fast tests/)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: python -m pytest -q tests
      - name: Build & push image to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

  deploy-stage:
    if: github.event_name == 'push'
    needs: ci
    runs-on: [self-hosted, local, stage]
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: Install test deps (for smoke/E2E)
        shell: pwsh
        run: pip install -r requirements.txt
      - name: Set GIT_SHA env
        shell: pwsh
        run: echo "GIT_SHA=${{ github.sha }}" >> $env:GITHUB_ENV
      - name: Deploy stage
        shell: pwsh
        run: |
          docker login ghcr.io -u $env:GITHUB_ACTOR -p $env:GITHUB_TOKEN
          docker compose -f docker-compose.stage.yml pull
          docker compose -f docker-compose.stage.yml up -d --remove-orphans
      - name: Wait for stage to be ready
        shell: pwsh
        env:
          URL: http://localhost:8080/healthz
        run: |
          $max=30; $ok=$false
          for ($i=1; $i -le $max; $i++) {
            try { $r = Invoke-WebRequest $env:URL -UseBasicParsing -TimeoutSec 2; if ($r.StatusCode -eq 200) { $ok=$true; break } }
            catch { Start-Sleep -Seconds 2 }
          }
          if (-not $ok) { throw "Stage not ready on $env:URL" }
      - name: Smoke on stage
        shell: pwsh
        env:
          URL: http://localhost:8080
        run: python tests/smoke.py

  e2e-stage:
    if: github.event_name == 'push'
    needs: deploy-stage
    runs-on: [self-hosted, local, stage]
    steps:
      - uses: actions/checkout@v4
      - name: Install test deps
        shell: pwsh
        run: pip install -r requirements.txt
      - name: E2E tests against stage
        shell: pwsh
        env:
          STAGE_URL: http://localhost:8080
        run: python -m pytest -q tests_stage

  deploy-prod:
    if: github.event_name == 'push'
    needs: e2e-stage
    runs-on: [self-hosted, local, prod]
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - name: Set GIT_SHA env
        shell: pwsh
        run: echo "GIT_SHA=${{ github.sha }}" >> $env:GITHUB_ENV
      - name: Deploy prod
        shell: pwsh
        run: |
          docker login ghcr.io -u $env:GITHUB_ACTOR -p $env:GITHUB_TOKEN
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d --remove-orphans
      - name: Smoke on prod
        shell: pwsh
        env:
          URL: http://localhost:9090
        run: python tests/smoke.py
